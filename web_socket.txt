# Real-Time Chat System Documentation (Vue.js + Laravel + Pusher)

## Overview

This document provides a complete guide to implementing a real-time chat system using Vue.js (Options API), Laravel (with Laravel Echo), and Pusher.

---

## Backend (Laravel)

### 1. Installation & Setup

1. **Install Laravel**:

   ```bash
   composer create-project laravel/laravel chat-app
   cd chat-app
   ```

2. **Install Pusher PHP SDK**:

   ```bash
   composer require pusher/pusher-php-server
   ```

3. **Configure .env**:

   ```env
   BROADCAST_DRIVER=pusher

   PUSHER_APP_ID=1947953
   PUSHER_APP_KEY=36ba5d689f573cef7020
   PUSHER_APP_SECRET=8288ae53644d254baf94
   PUSHER_APP_CLUSTER=ap2
   PUSHER_HOST=
   PUSHER_PORT=443
   PUSHER_SCHEME=https

   VITE_PUSHER_APP_KEY=36ba5d689f573cef7020
   VITE_PUSHER_APP_CLUSTER=ap2
   VITE_PUSHER_HOST="${PUSHER_HOST}"
   VITE_PUSHER_PORT="${PUSHER_PORT}"
   VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
   ```

4. **Enable Broadcasting**:

   * In `config/broadcasting.php`, ensure `pusher` is set as default.
   * Run `php artisan config:clear` if needed.

  **routes/channel.php**: 

   Broadcast::channel('chat.{userId}', function ($user, $userId) {
    \Log::info('Broadcast auth: ' . $user->id . ' === ' . $userId);
    return (int) $user->id === (int) $userId;
   });

5. **routes/api.php**

   ```php
   Route::prefix('v1')->group(function () {
       Route::prefix('messages')->middleware('auth:api')->group(function () {
           Route::get('get-all-conversations', [Controller::class, 'GetAllConversations']);
           Route::get('get-conversation-messages/{id}', [Controller::class, 'GetConversationMessages']);
           Route::post('start-conversation', [Controller::class, 'StartConversation']);
           Route::post('send', [Controller::class, 'SendMessage']);
       });
   });
   ```

6. **Broadcasting Event Example**:

   ```php
   broadcast(new MessageSent($message, auth()->user()))->toOthers();
   ```

7. **SendMessage Action Class**: Validates, stores, and broadcasts the message.

---

## Frontend (Vue 3 with Vite)

### 1. Installation & Setup

1. **Install Node Dependencies**:

   ```bash
   npm install
   ```

2. **Install Laravel Echo + Pusher JS**:

   ```bash
   npm install --save laravel-echo pusher-js
   ```

3. **Initialize Echo in bootstrap.js**:

   ```js
   import Echo from "laravel-echo";
   import Pusher from "pusher-js";

   window.Pusher = Pusher;
   Pusher.logToConsole = true;

   const token = localStorage.getItem("admin_token");

   window.Echo = new Echo({
     broadcaster: "pusher",
     key: import.meta.env.VITE_PUSHER_APP_KEY,
     cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,
     forceTLS: true,
     encrypted: true,
     authEndpoint: "/broadcasting/auth",
     auth: {
       headers: {
         Authorization: `Bearer ${token}`,
       },
     },
   });
   ```

4. **Vite Config (vite.config.js)**:

   ```js
   import { defineConfig } from "vite";
   import laravel from "laravel-vite-plugin";
   import vue from "@vitejs/plugin-vue";

   export default defineConfig({
     plugins: [
       laravel({
         input: [
           "resources/sass/app.scss",
           "resources/js/frontend/app.js",
           "resources/js/backend/Views/SuperAdmin/app.js",
           "resources/js/backend/Views/Employee/app.js",
         ],
         refresh: true,
       }),
       vue(),
     ],
     envPrefix: "VITE_",
     resolve: {
       alias: {
         vue: "vue/dist/vue.esm-bundler.js",
       },
     },
   });
   ```

5. **Build Assets**:

   ```bash
   npm run dev
   ```

6. **Project Structure**:

   * `resources/js/backend/Views/SuperAdmin/bootstrap.js`
   * `resources/js/backend/Views/Employee/bootstrap.js`
   * `resources/js/backend/Views/SuperAdmin/app.js`
   * `resources/js/backend/Views/Employee/app.js`

   Each `bootstrap.js` initializes Echo for real-time communication.

---

## Vue Component (Conversation.vue)

* Fetch and list all conversations
* Start new conversations
* Load and display messages
* Send messages
* Listen for incoming messages

### Listening to Incoming Messages

```js
window.Echo.private(`chat.${userId}`)
  .listen("MessageSent", (e) => {
    // Push incoming message
  })
  .subscribed(() => {
    console.log("Subscribed to chat." + userId);
  })
  .error((err) => console.error("Subscription error:", err));
```

### Sending Messages

```js
await axios.post("/messages/send", {
  conversation_id: this.activeConversation.id,
  text: this.newMessage,
});
```

### Message Type Identification

Ensure each message is labeled correctly based on the current user:

```js
this.messages = res.data.data.map((m) => ({
  ...m,
  type: m.sender.id === this.auth_info.id ? "mine" : "theirs",
}));
```

---

## Common Issues & Fixes

| Issue                        | Solution                                                   |
| ---------------------------- | ---------------------------------------------------------- |
| `App key not in cluster`     | Ensure correct cluster is set in both `.env` and JS        |
| Duplicate messages           | Avoid pushing message manually and also listening to self  |
| Subscription error           | Check token and `auth:api` middleware                      |
| Vue message alignment issues | Label messages with type `mine` or `theirs` during mapping |

---

## Optional Enhancements

* Typing indicator
* Seen/read status
* Image/file attachments
* Notification badge for new messages

---

## Conclusion

This setup provides a reliable real-time chat using Laravel Echo, Vue.js, and Pusher. Proper configuration of auth, message broadcasting, and UI message typing is key to a smooth user experience.
